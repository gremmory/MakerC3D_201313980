package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T==");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}


terminal TokenC3D IGUAL2, DIFE, MAYORQ, MENORQ, MENORQI, MAYORQI, ANDR, ORR, NOTR;
terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
nonterminal NodoC3D inicial, expresion;


precedence left ORR;
precedence left ANDR;
precedence right NOTR;
precedence left IGUAL2, DIFE, MAYORQ, MENORQ, MENORQI, MAYORQI;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D(exp.getCad() + "\nEtiqueta V: " + ControlC3D.getEtqV() + "\nEtiqueta F: " + ControlC3D.getEtqF() );
                    :};

expresion   ::= expresion:izq DIFE expresion:der
                    {: 
                        String tempV = ControlC3D.generaTempL();
                        String c3d = "if " + izq.getCad() + " != " + der.getCad() + " then goto " + tempV + ";\n";
                        String tempF = ControlC3D.generaTempL();
                        c3d = c3d + "goto " + tempF + ";\n";
                        
                        NodoC3D nodo = new NodoC3D(tempV);
                        nodo.setTempV(tempV);
                        nodo.setTempF(tempF);
                        nodo.setCadena(c3d);

                        ControlC3D.agregarC3DV(tempV);
                        ControlC3D.agregarC3DF(tempF);
                        RESULT = nodo; 
                    :}
            |   expresion:izq ORR expresion:der
                    {: 
                        String c3d = izq.getCadena() + izq.getTempF() + ":\n" + der.getCadena();

                        NodoC3D nodo = new NodoC3D(c3d);
                        nodo.setTempV(der.getTempV());
                        nodo.setTempF(der.getTempF());
                        nodo.setCadena(c3d);

                        ControlC3D.LimpiarC3DF();
                        ControlC3D.agregarC3DF(der.getTempF());
                        RESULT = nodo; 
                    :}
            |   expresion:izq ANDR expresion:der
                    {: 
                        String c3d = izq.getCadena() + izq.getTempV() + ":\n" + der.getCadena();

                        NodoC3D nodo = new NodoC3D(c3d);
                        nodo.setTempV(der.getTempV());
                        nodo.setTempF(der.getTempF());
                        nodo.setCadena(c3d);
                        
                        ControlC3D.LimpiarC3DV();
                        ControlC3D.agregarC3DV(der.getTempV());

                        RESULT = nodo;
                    :}
            |   NOTR expresion:exp 
                    {: 
                        String c3d = exp.getCadena();

                        NodoC3D nodo = new NodoC3D(c3d);
                        nodo.setTempV(exp.getTempF());
                        nodo.setTempF(exp.getTempV());
                        nodo.setCadena(c3d);
                        
                        String a = ControlC3D.getEtqV();
                        String b = ControlC3D.getEtqF();
                        ControlC3D.LimpiarC3DV();
                        ControlC3D.LimpiarC3DF();
                        ControlC3D.agregarC3DV(b);
                        ControlC3D.agregarC3DF(a);


                        RESULT = nodo;
                    :}
            |   expresion:izq IGUAL2 expresion:der
                    {: 
                        String tempV = ControlC3D.generaTempL();
                        String c3d = "if " + izq.getCad() + " == " + der.getCad() + " then goto " + tempV + ";\n";
                        String tempF = ControlC3D.generaTempL();
                        c3d = c3d + "goto " + tempF + ";\n";
                        
                        NodoC3D nodo = new NodoC3D(tempV);
                        nodo.setTempV(tempV);
                        nodo.setTempF(tempF);
                        nodo.setCadena(c3d);

                        ControlC3D.agregarC3DV(tempV);
                        ControlC3D.agregarC3DF(tempF);
                        RESULT = nodo; 
                    :}
            |   expresion:izq MAYORQ expresion:der
                    {: 
                        String tempV = ControlC3D.generaTempL();
                        String c3d = "if " + izq.getCad() + " > " + der.getCad() + " then goto " + tempV + ";\n";
                        String tempF = ControlC3D.generaTempL();
                        c3d = c3d + "goto " + tempF + ";\n";
                        
                        NodoC3D nodo = new NodoC3D(tempV);
                        nodo.setTempV(tempV);
                        nodo.setTempF(tempF);
                        nodo.setCadena(c3d);

                        ControlC3D.agregarC3DV(tempV);
                        ControlC3D.agregarC3DF(tempF);
                        RESULT = nodo; 
                    :}
            |   expresion:izq MENORQ expresion:der
                    {: 
                        String tempV = ControlC3D.generaTempL();
                        String c3d = "if " + izq.getCad() + " < " + der.getCad() + " then goto " + tempV + ";\n";
                        String tempF = ControlC3D.generaTempL();
                        c3d = c3d + "goto " + tempF + ";\n";
                        
                        NodoC3D nodo = new NodoC3D(tempV);
                        nodo.setTempV(tempV);
                        nodo.setTempF(tempF);
                        nodo.setCadena(c3d);

                        ControlC3D.agregarC3DV(tempV);
                        ControlC3D.agregarC3DF(tempF);
                        RESULT = nodo; 

                    :}
            |   expresion:izq MENORQI expresion:der
                    {: 
                        String tempV = ControlC3D.generaTempL();
                        String c3d = "if " + izq.getCad() + " <= " + der.getCad() + " then goto " + tempV + ";\n";
                        String tempF = ControlC3D.generaTempL();
                        c3d = c3d + "goto " + tempF + ";\n";
                        
                        NodoC3D nodo = new NodoC3D(tempV);
                        nodo.setTempV(tempV);
                        nodo.setTempF(tempF);
                        nodo.setCadena(c3d);

                        ControlC3D.agregarC3DV(tempV);
                        ControlC3D.agregarC3DF(tempF);
                        RESULT = nodo; 
                    :}
            |   expresion:izq MAYORQI expresion:der
                    {: 
                        String tempV = ControlC3D.generaTempL();
                        String c3d = "if " + izq.getCad() + " >= " + der.getCad() + " then goto " + tempV + ";\n";
                        String tempF = ControlC3D.generaTempL();
                        c3d = c3d + "goto " + tempF + ";\n";
                        
                        NodoC3D nodo = new NodoC3D(tempV);
                        nodo.setTempV(tempV);
                        nodo.setTempF(tempF);
                        nodo.setCadena(c3d);

                        ControlC3D.agregarC3DV(tempV);
                        ControlC3D.agregarC3DF(tempF);
                        RESULT = nodo; 
                    :}
            |   expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {:  RESULT = exp;; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            | error{: RESULT = new NodoC3D("Culo"); :}
            ;